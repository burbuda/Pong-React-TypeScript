{"version":3,"sources":["components/Canvas/index.tsx","components/Canvas/variables.ts","components/Canvas/functions.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["canvas","ctx","grid","collides","obj1","obj2","x","width","y","height","Canvas","leftPaddle","rightPaddle","ball","LeftmaxPaddleY","RightmaxPaddleY","canvasRef","useRef","useEffect","current","getContext","paddleHeight","dy","getRightPaddle","resetting","dx","getBall","window","addEventListener","e","which","loop","requestAnimationFrame","clearRect","fillStyle","fillRect","setTimeout","i","ref","className","classes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4d2fb5d.chunk.js","sourcesContent":["import React, {\r\n  useRef,\r\n  useEffect,\r\n} from 'react';\r\n\r\nimport {\r\n  grid,\r\n  paddleHeight,\r\n  paddleSpeed,\r\n  ballColor\r\n} from './variables';\r\n\r\nimport {\r\n  getBall,\r\n  getLeftPaddle,\r\n  getRightPaddle,\r\n  collides\r\n} from './functions';\r\n\r\nimport {Paddle, Ball} from './interfaces';\r\n\r\n\r\nimport classes from './styles.module.css';\r\n\r\nlet canvas: HTMLCanvasElement;\r\nlet ctx: any;\r\n\r\n\r\nconst Canvas = () => {\r\n  let canvasRef = useRef < HTMLCanvasElement > (null);\r\n  let leftPaddle:Paddle;\r\n  let rightPaddle:Paddle;\r\n  let ball:Ball;\r\n  let LeftmaxPaddleY:number;\r\n  let RightmaxPaddleY:number;\r\n\r\n  useEffect(() => {\r\n    if (canvasRef.current) {\r\n      canvas = canvasRef.current;\r\n      ctx = canvas.getContext('2d');\r\n    };\r\n\r\n    leftPaddle = getLeftPaddle(canvas);\r\n    rightPaddle = getRightPaddle(canvas);\r\n    ball = getBall(canvas);\r\n\r\n    LeftmaxPaddleY = canvas.height - grid - paddleHeight * 2;\r\n    RightmaxPaddleY = canvas.height - grid - paddleHeight*2;\r\n\r\n    window.addEventListener('keydown', (e) => {\r\n      if (e.which === 38) {\r\n        rightPaddle.dy = -paddleSpeed;\r\n      }\r\n      else if (e.which === 40) {\r\n        rightPaddle.dy = paddleSpeed;\r\n      }\r\n    });\r\n    window.addEventListener('keyup', (e) => {\r\n      if (e.which === 38 || e.which === 40) {\r\n        rightPaddle.dy = 0;\r\n      }\r\n    });\r\n    loop();\r\n  }, []);\r\n\r\n  const loop = () => {\r\n    requestAnimationFrame(loop);\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    leftPaddle.y += leftPaddle.dy;\r\n    rightPaddle.y += rightPaddle.dy;\r\n    if (leftPaddle.y < grid) {\r\n      leftPaddle.y = grid;\r\n    }\r\n    else if (leftPaddle.y > LeftmaxPaddleY) {\r\n      leftPaddle.y = LeftmaxPaddleY;\r\n    }\r\n    if (rightPaddle.y < grid) {\r\n      rightPaddle.y = grid;\r\n    }\r\n    else if (rightPaddle.y > RightmaxPaddleY) {\r\n      rightPaddle.y = RightmaxPaddleY;\r\n    }\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(leftPaddle.x, leftPaddle.y, leftPaddle.width, leftPaddle.height);\r\n    ctx.fillRect(rightPaddle.x, rightPaddle.y, rightPaddle.width, rightPaddle.height);\r\n    ball.x += ball.dx;\r\n    ball.y += ball.dy;\r\n    leftPaddle.dy = ball.dy;\r\n    if (ball.y < grid) {\r\n      ball.y = grid;\r\n      ball.dy *= -1;\r\n    }\r\n    else if (ball.y + grid > canvas.height - grid) {\r\n      ball.y = canvas.height - grid * 2;\r\n      ball.dy *= -1;\r\n    }\r\n    if ((ball.x < 0 || ball.x > canvas.width) && !ball.resetting) {\r\n      ball.resetting = true;\r\n      setTimeout(() => {\r\n        ball.resetting = false;\r\n        ball.x = canvas.width / 2;\r\n        ball.y = canvas.height / 2;\r\n      }, 1000);\r\n    };\r\n    if (collides(ball, leftPaddle)) {\r\n      ball.dx *= -1;\r\n      ball.x = leftPaddle.x + leftPaddle.width;\r\n    } else if (collides(ball, rightPaddle)) {\r\n      ball.dx *= -1;\r\n      ball.x = rightPaddle.x - ball.width;\r\n    };\r\n    ctx.fillStyle = ballColor;\r\n    ctx.fillRect(ball.x, ball.y, ball.width, ball.height);\r\n    ctx.fillRect(0, 0, canvas.width, grid);\r\n    ctx.fillRect(0, canvas.height - grid, canvas.width, canvas.height);\r\n    for (let i = grid; i < canvas.height - grid; i += grid * 2) {\r\n      ctx.fillRect(canvas.width / 2 - grid / 2, i, grid, grid);\r\n    };\r\n  }\r\n\r\n  return <canvas ref = {canvasRef} width = \"1000\" height = \"600\" className = {classes.Canvas} />\r\n};\r\n\r\nexport default Canvas;","export const grid = 15;\r\nexport const paddleHeight = grid * 5;\r\nexport let paddleSpeed = 6;\r\nexport let ballSpeed = 4;\r\nexport let record = 0;\r\nexport let count = 0;\r\nexport let secret = false;\r\nexport let secret_count = 0;\r\nexport let ballColor = '#000';","import { Paddle, Ball } from './interfaces';\r\nimport {\r\n    grid,\r\n    paddleHeight,\r\n    ballSpeed,\r\n} from './variables';\r\n\r\nexport const getLeftPaddle = (canvas: HTMLCanvasElement) => {\r\n    return {\r\n        x: grid * 2,\r\n        y: canvas.height / 2 - paddleHeight / 2,\r\n        width: grid,\r\n        height: paddleHeight * 2,\r\n        dy: 0\r\n    }\r\n}\r\n\r\nexport const getRightPaddle = (canvas: HTMLCanvasElement) => {\r\n    return {\r\n        x: canvas.width - grid * 3,\r\n        y: canvas.height / 2 - paddleHeight / 2,\r\n        width: grid,\r\n        height: paddleHeight * 2,\r\n        dy: 0\r\n    }\r\n}\r\n\r\nexport const getBall = (canvas: HTMLCanvasElement) => {\r\n    return {\r\n        x: canvas.width / 2,\r\n        y: canvas.height / 2,\r\n        width: grid,\r\n        height: grid,\r\n        resetting: false,\r\n        dx: ballSpeed,\r\n        dy: -ballSpeed\r\n    }\r\n}\r\n\r\nexport const collides = (obj1: Ball, obj2: Paddle) => {\r\n    return obj1.x < obj2.x + obj2.width &&\r\n        obj1.x + obj1.width > obj2.x &&\r\n        obj1.y < obj2.y + obj2.height &&\r\n        obj1.y + obj1.height > obj2.y;\r\n}","import React from 'react';\nimport './App.css';\n\nimport Canvas from './components/Canvas';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}